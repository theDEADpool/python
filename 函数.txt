1、如果函数传入一个字符串变量，在函数内部修改形参的值，实参的值不会发生变化。
但如果函数传入一个列表，在函数内部修改形参的值，实参也会发生变化。

2、函数收集参数，即可变参数
def func(*param)
param在函数内部就是一个元组
func('123')，param=('123', )
func(1,2,3)，param=(1, 2, 3)
如果要收集关键字参数
def func(**param)
此时，入参可以写成func(x=1, y=2, z=3)，param={x:1, y:2, z:3}是一个字典
也可以把上面两种混合使用
def func(*param1, **param2)
func(1,2,3,x='a',y='b')，则param1=(1, 2, 3)， param2={x:'a', y:'b'}
甚至可以没有默认值的关键字参数，有默认值的关键字参数，收集参数和关键字收集参数一起合起来用
def func(x, y, z=1, *param1, **param2)

3、如果一个函数内部定义了一个局部变量x，同时有个去全局变量也为x。那么在该函数内对于x的操作，实际上操作的是局部变量x。如果想要访问全局变量x，则可以通过global()['x']来完成。
如果定义了一个全局变量x，现在需要在函数里面使用这个全局变量则
x = 1
def func():
global x
x += 1
>>>x
2

4、map(func, list[...])
map函数有两个参数，一个函数func，一个列表list[...]
函数的作用是对列表中的每一个元素调用函数func，并将结果组成一个新的列表

5、filter(func, list[...])
filter和map函数类似，将func作用于列表中的每一个元素，然后判断func返回值是True还是False，返回值为True则保留该元素，False则舍弃。最终将保留的元素组成一个新的列表

6、reduce(func, list[...])
reduce接收的func函数必须能传入2个参数。
A = [1， 2， 3， 4， 5]
reduce(func, A)实际上就是先计算x = func(1, 2)，然后y = func(x, 3)，z = func(y, 4)..依次迭代
func(func(func(func(1, 2), 3), 4), 5)